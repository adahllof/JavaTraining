type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/GameBoard.java
  visible: true
  text: |
    package battleship;

    import java.io.IOException;
    import java.util.Scanner;

    public class GameBoard {
        private int gameBoardSize;
        private char[][] gameBoard;
        private final char fogOfWar = '~';
        private final char ship = 'O';
        private final char hit = 'X';
        private final char miss = 'M';

        private void clear() {
            for (int row = 0; row < gameBoardSize; row++ ) {
                for (int col = 0; col < gameBoardSize; col++) {
                    this.gameBoard[row][col] = fogOfWar;
                }
            }
        }
        public GameBoard (int size) {
            //** Initiate all positions to fogOfWar symbol */
            this.gameBoardSize = size;
            this.gameBoard = new char[gameBoardSize][gameBoardSize];
            clear();
        }

        public void placeShips() {
            clear();
            printBoard();
            readShip(5, "Aircraft Carrier");
            printBoard();
            readShip(4, "Battleship");
            printBoard();
            readShip(3, "Submarine");
            printBoard();
            readShip(3, "Cruiser");
            printBoard();
            readShip(2, "Destroyer");
            printBoard();
        }
        public void fire() {
            Position p;
            p = readPosition();

            boolean hit = fireAtPosition(p);
            printBoard();
            System.out.println();
            if (hit) {
                System.out.println("You hit a ship!");
            } else {
                System.out.println("You missed!");
            }
            System.out.println();


        }
        private char getCharAtPosition(Position p) {
            if (!(p == null)) {
                return gameBoard[p.getRow()][p.getCol()];
            } else {
                return (char) 0x0000;
            }
        }
        private void setCharAtPosition(Position p, char c) {
            if (!(p == null)) {
                gameBoard[p.getRow()][p.getCol()] = c;
            }
        }
        private boolean fireAtPosition(Position p) {
            if (!(p == null )) {
                switch (getCharAtPosition(p)) {
                    case ship: //Hit
                        setCharAtPosition(p, hit);
                        return true;

                    case fogOfWar: // Miss
                        setCharAtPosition(p, miss);
                        return false;

                    case hit: //A ship was hit in a position were it was hit before
                        return true;

                    default: // Should only happen when firing on the same position again
                        return false;
                }

            } else{
                return  false;  //Miss!
            }
        }
        private Position readPosition() {
            printBoard();
            System.out.println();

            Position p;
            boolean validInput;
            try (Scanner scanner = new Scanner(System.in)) {
                String input;
                do {
                    System.out.println("Take a shot!");
                    System.out.println();
                    input = scanner.nextLine();
                    p = str2pos(input);
                    validInput = inRange(p);
                    if (!validInput) {
                        System.out.println();
                        System.out.println("Error You entered the wrong coordinates! Try again:");
                        System.out.println();
                    }
                } while (!validInput);
                return p;
            } catch (Exception e) {
                System.out.println("Error! " + e.getMessage());
                return null;
            }
        }


        private boolean isTooClose(Position startOfShip, Position endOfShip) {
            /** Check if the ship is placed over or to close to another ship */
            Position start = new Position(startOfShip.getRow() - 1, startOfShip.getCol() - 1);
            Position end = new Position(endOfShip.getRow() + 1, endOfShip.getCol() + 1);
            boolean tooClose = false;
            for (Position current = start; current.isLessOrEquals(end); current.next(start, end)) {
                tooClose = isOccupied(current);
                if (tooClose) {
                    break;
                }
            }
            return tooClose;
        }
        private boolean isOccupied(Position p) {
            if (inRange(p)) {
                return !(gameBoard[p.getRow()][p.getCol()] == fogOfWar);
            } else {
                return false;
            }
        }

        private void readShip(int sizeOfShip, String typeOfShip) {
            boolean validInput;
            Position start = new Position(-1,-1);
            Position end = new Position(-1,-1);;
            int size = 0;
            String input;
            String[] coordinates;
            System.out.println("Enter the coordinates of the " + typeOfShip + " (" + String.valueOf(sizeOfShip) + " cells):");
            try (Scanner scanner = new Scanner(System.in)) {
                do {
                    input = scanner.nextLine();
                    coordinates = input.split("\\s+", 2);
                    start = str2pos(coordinates[0]);
                    end = str2pos(coordinates[1]);
                    if (!end.isGreater(start)) {
                        Position temp; //Swap start end if incorrect order
                        temp = start;
                        start = end;
                        end = temp;
                    }
                    validInput = inRange(start) && inRange(end);
                    if (validInput) {
                        int[] sizeArray;
                        sizeArray = Position.rangeSize(start, end);
                        if (sizeArray[0] == 1) {
                            size = sizeArray[1];
                        } else if (sizeArray[1] == 1) {
                            size = sizeArray[0];
                        } else {
                            validInput = false;
                            size = 0;
                        }
                    }
                    if (validInput) {
                        if (!(size == sizeOfShip)) {
                            validInput = false;
                            System.out.println();
                            System.out.println("Error! Wrong length of the " + typeOfShip + "! Try again!");
                        }
                    } else {
                        System.out.println();
                        System.out.println("Error! Wrong ship location! Try again!");
                    }
                    if (validInput && isTooClose(start, end)) {
                        validInput = false;
                        System.out.println();
                        System.out.println("Error! The ship is too close to another one! Try again!");
                    }
                } while (!validInput);

            } catch (Exception e) {
                String message = e.getMessage();
                System.out.println();
                System.out.println("Input error: " + message);

            }
            for (Position p = start; p.isLessOrEquals(end); p.next(start, end)) {
                gameBoard[p.getRow()][p.getCol()] = ship;
            }
        }

        private static int char2row(char c) {
            return (int)c - 0x0041;
            }

        private static Position str2pos(String s) {
            Position p;
            if (!(s == null)) {
                int row = char2row(s.charAt(0)); //first char should be a letter signifying a column
                int col = Integer.parseInt(s.substring(1)) - 1;
                p = new Position(row, col);
            } else {
                p = null;
            }
            return p;
            }


        private boolean inRange(Position p) {
            if (!(p == null)) {
                if (p.getRow() < 0 || p.getRow() >= gameBoardSize) {
                    return false;
                } else if (p.getCol() < 0 || p.getCol() >= gameBoardSize) {
                    return false;
                } else {
                    return true;
                }
            } else {
                return false;
            }
        }

        private int sizeOfShip(Position start, Position end) {
            //Return -1 if not a valid range
            int[] size;
            size = Position.rangeSize(start, end);
            if (size[0] == 1) {
                return size[1];
            } else if (size[1] == 1) {
                return size[0];
            } else {
                return 0; //Not a valid ship size!
            }
        }
        public void printBoard() {
            //Print first line, column headers
            System.out.println();
            System.out.print("  ");
            for (int i = 1; i <= gameBoardSize; i++) {
                System.out.print(i);
                System.out.print(" ");
            }
            System.out.println();

            //Print rest of board
            for (int row = 0; row < gameBoardSize; row++) {
                System.out.print((char)(row + 0x0041) + " ");
                for (int col = 0; col < gameBoardSize; col++) {
                    System.out.print(gameBoard[row][col] + " ");
                }
                System.out.println();
            }
            System.out.println();
        }
    }
  learner_created: true
- name: src/battleship/Position.java
  visible: true
  text: |
    package battleship;

    public class Position {
        private int row;
        private int col;

        public Position(int row, int col) {
            this.row = row;
            this.col = col;
        }
        public void setPositon(int row, int col) {
            this.row = row;
            this.col = col;
        }

        public int getRow() {
            return row;
        }

        public int getCol() {
            return col;
        }

        public void next(Position start, Position end) {
            if (start.getRow() < row) {
                row = start.getRow(); //If row above range move to start row
            } else if (row > end.getRow()) {
                row = end.getRow();
            }
            if (start.getCol() < col) {
                col = start.getCol(); //If col to the left of range move into range
            } else if (col > end.getCol()) {
                col = end.getCol();
            }
            if (col  < end.getCol()) {
                //The end of the row has not been reached
                col++;
            } else {
                row++;
                col = start.getCol();
            }
        }
        public static int[] rangeSize(Position start, Position end) {
            int[] size = new int[2];
            if (start.getRow() > end.getRow()) {
                size[0] = start.getRow() - end.getRow() + 1;
            } else {
                size[0] = end.getRow() - start.getRow() + 1;
            }
            if (start.getCol() > end.getCol()) {
                size[1] = start.getCol() - end.getCol() + 1;
            } else {
                size[1] = end.getCol() - start.getCol() + 1;
            }
            return size;
        }
        public boolean isGreater(Position p) {
            if (row > p.getRow()) {
                return true;
            } else if (row == p.row && col >= p.col) {
                return true;
            } else {
                return false;
            }
        }
        public boolean isEqualTo(Position p) {
            return row == p.row && col == p.col;
        }

        public boolean isLessOrEquals(Position p) {
            if (row < p.row) {
                return true;
            } else if (row == p.row && col <= p.col) {
                return true;
            } else {
                return false;
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/665/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 04 Dec 2020 08:38:51 UTC
record: 4
