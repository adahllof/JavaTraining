type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/GameBoard.java
  visible: true
  text: "package battleship;\n\nimport java.io.IOException;\nimport java.util.Scanner;\n\
    \npublic class GameBoard {\n    private int gameBoardSize;\n    private char[][]\
    \ gameBoard;\n    private final char fogOfWar = '~';\n    private final char ship\
    \ = 'O';\n    private final char hit = 'X';\n    private final char miss = 'M';\n\
    \n    private void clear() {\n        for (int row = 0; row < gameBoardSize; row++\
    \ ) {\n            for (int col = 0; col < gameBoardSize; col++) {\n         \
    \       this.gameBoard[row][col] = fogOfWar;\n            }\n        }\n    }\n\
    \    public GameBoard (int size) {\n        //** Initiate all positions to fogOfWar\
    \ symbol */\n        this.gameBoardSize = size;\n        this.gameBoard = new\
    \ char[gameBoardSize][gameBoardSize];\n        clear();\n    }\n\n    public void\
    \ placeShips() {\n        clear();\n        printBoard(false);\n        readShip(5,\
    \ \"Aircraft Carrier\");\n        printBoard(false);\n        readShip(4, \"Battleship\"\
    );\n        printBoard(false);\n        readShip(3, \"Submarine\");\n        printBoard(false);\n\
    \        readShip(3, \"Cruiser\");\n        printBoard(false);\n        readShip(2,\
    \ \"Destroyer\");\n        printBoard(false);\n    }\n    public void fire() {\n\
    \        Position p;\n        p = readPosition();\n\n        boolean hit = fireAtPosition(p);\n\
    \        printBoard(true);\n        System.out.println();\n        if (hit) {\n\
    \            System.out.println(\"You hit a ship!\");\n        } else {\n    \
    \        System.out.println(\"You missed!\");\n        }\n        System.out.println();\n\
    \        printBoard(false);\n\n\n    }\n    public void play() {\n        Position\
    \ p;\n        int remaining;\n        p = readPosition();\n\n        boolean hit\
    \ = fireAtPosition(p);\n        printBoard(true);\n        System.out.println();\n\
    \        if (hit) {\n            System.out.println(\"You hit a ship!\");\n  \
    \      } else {\n            System.out.println(\"You missed!\");\n        }\n\
    \        System.out.println();\n        \n\n\n    }\n    private char getCharAtPosition(Position\
    \ p) {\n        if (!(p == null)) {\n            return gameBoard[p.getRow()][p.getCol()];\n\
    \        } else {\n            return (char) 0x0000;\n        }\n    }\n    private\
    \ void setCharAtPosition(Position p, char c) {\n        if (!(p == null)) {\n\
    \            gameBoard[p.getRow()][p.getCol()] = c;\n        }\n    }\n    private\
    \ boolean fireAtPosition(Position p) {\n        if (!(p == null )) {\n       \
    \     switch (getCharAtPosition(p)) {\n                case ship: //Hit\n    \
    \                setCharAtPosition(p, hit);\n                    return true;\n\
    \n                case fogOfWar: // Miss\n                    setCharAtPosition(p,\
    \ miss);\n                    return false;\n\n                case hit: //A ship\
    \ was hit in a position were it was hit before\n                    return true;\n\
    \n                default: // Should only happen when firing on the same position\
    \ again\n                    return false;\n            }\n\n        } else{\n\
    \            return  false;  //Miss!\n        }\n    }\n    private Position readPosition()\
    \ {\n        printBoard(true);\n        System.out.println();\n\n        Position\
    \ p;\n        boolean validInput;\n        try (Scanner scanner = new Scanner(System.in))\
    \ {\n            String input;\n            do {\n                System.out.println(\"\
    Take a shot!\");\n                System.out.println();\n                input\
    \ = scanner.nextLine();\n                p = str2pos(input);\n               \
    \ validInput = inRange(p);\n                if (!validInput) {\n             \
    \       System.out.println();\n                    System.out.println(\"Error\
    \ You entered the wrong coordinates! Try again:\");\n                    System.out.println();\n\
    \                }\n            } while (!validInput);\n            return p;\n\
    \        } catch (Exception e) {\n            System.out.println(\"Error! \" +\
    \ e.getMessage());\n            return null;\n        }\n    }\n\n\n    private\
    \ boolean isTooClose(Position startOfShip, Position endOfShip) {\n        /**\
    \ Check if the ship is placed over or to close to another ship */\n        Position\
    \ start = new Position(startOfShip.getRow() - 1, startOfShip.getCol() - 1);\n\
    \        Position end = new Position(endOfShip.getRow() + 1, endOfShip.getCol()\
    \ + 1);\n        boolean tooClose = false;\n        for (Position current = start;\
    \ current.isLessOrEquals(end); current.next(start, end)) {\n            tooClose\
    \ = isOccupied(current);\n            if (tooClose) {\n                break;\n\
    \            }\n        }\n        return tooClose;\n    }\n    private boolean\
    \ isOccupied(Position p) {\n        if (inRange(p)) {\n            return !(gameBoard[p.getRow()][p.getCol()]\
    \ == fogOfWar);\n        } else {\n            return false;\n        }\n    }\n\
    \n    private void readShip(int sizeOfShip, String typeOfShip) {\n        boolean\
    \ validInput;\n        Position start = new Position(-1,-1);\n        Position\
    \ end = new Position(-1,-1);;\n        int size = 0;\n        String input;\n\
    \        String[] coordinates;\n        System.out.println(\"Enter the coordinates\
    \ of the \" + typeOfShip + \" (\" + String.valueOf(sizeOfShip) + \" cells):\"\
    );\n        try (Scanner scanner = new Scanner(System.in)) {\n            do {\n\
    \                input = scanner.nextLine();\n                coordinates = input.split(\"\
    \\\\s+\", 2);\n                start = str2pos(coordinates[0]);\n            \
    \    end = str2pos(coordinates[1]);\n                if (!end.isGreater(start))\
    \ {\n                    Position temp; //Swap start end if incorrect order\n\
    \                    temp = start;\n                    start = end;\n       \
    \             end = temp;\n                }\n                validInput = inRange(start)\
    \ && inRange(end);\n                if (validInput) {\n                    int[]\
    \ sizeArray;\n                    sizeArray = Position.rangeSize(start, end);\n\
    \                    if (sizeArray[0] == 1) {\n                        size =\
    \ sizeArray[1];\n                    } else if (sizeArray[1] == 1) {\n       \
    \                 size = sizeArray[0];\n                    } else {\n       \
    \                 validInput = false;\n                        size = 0;\n   \
    \                 }\n                }\n                if (validInput) {\n  \
    \                  if (!(size == sizeOfShip)) {\n                        validInput\
    \ = false;\n                        System.out.println();\n                  \
    \      System.out.println(\"Error! Wrong length of the \" + typeOfShip + \"! Try\
    \ again!\");\n                    }\n                } else {\n              \
    \      System.out.println();\n                    System.out.println(\"Error!\
    \ Wrong ship location! Try again!\");\n                }\n                if (validInput\
    \ && isTooClose(start, end)) {\n                    validInput = false;\n    \
    \                System.out.println();\n                    System.out.println(\"\
    Error! The ship is too close to another one! Try again!\");\n                }\n\
    \            } while (!validInput);\n\n        } catch (Exception e) {\n     \
    \       String message = e.getMessage();\n            System.out.println();\n\
    \            System.out.println(\"Input error: \" + message);\n\n        }\n \
    \       for (Position p = start; p.isLessOrEquals(end); p.next(start, end)) {\n\
    \            gameBoard[p.getRow()][p.getCol()] = ship;\n        }\n    }\n\n \
    \   private static int char2row(char c) {\n        return (int)c - 0x0041;\n \
    \       }\n\n    private static Position str2pos(String s) {\n        Position\
    \ p;\n        if (!(s == null)) {\n            int row = char2row(s.charAt(0));\
    \ //first char should be a letter signifying a column\n            int col = Integer.parseInt(s.substring(1))\
    \ - 1;\n            p = new Position(row, col);\n        } else {\n          \
    \  p = null;\n        }\n        return p;\n        }\n\n\n    private boolean\
    \ inRange(Position p) {\n        if (!(p == null)) {\n            if (p.getRow()\
    \ < 0 || p.getRow() >= gameBoardSize) {\n                return false;\n     \
    \       } else if (p.getCol() < 0 || p.getCol() >= gameBoardSize) {\n        \
    \        return false;\n            } else {\n                return true;\n \
    \           }\n        } else {\n            return false;\n        }\n    }\n\
    \n    private int sizeOfShip(Position start, Position end) {\n        //Return\
    \ -1 if not a valid range\n        int[] size;\n        size = Position.rangeSize(start,\
    \ end);\n        if (size[0] == 1) {\n            return size[1];\n        } else\
    \ if (size[1] == 1) {\n            return size[0];\n        } else {\n       \
    \     return 0; //Not a valid ship size!\n        }\n    }\n    public void printBoard(boolean\
    \ hideShips) {\n        //Print blank line\n        System.out.println();\n  \
    \      //Print the column headers\n        System.out.print(\"  \");\n       \
    \ for (int i = 1; i <= gameBoardSize; i++) {\n            System.out.print(i);\n\
    \            System.out.print(\" \");\n        }\n        System.out.println();\n\
    \n        //Print the rest of the board\n        for (int row = 0; row < gameBoardSize;\
    \ row++) {\n            System.out.print((char) (row + 0x0041) + \" \");\n   \
    \         for (int col = 0; col < gameBoardSize; col++) {\n                if\
    \ (hideShips && gameBoard[row][col] == ship) {\n                    System.out.print(fogOfWar\
    \ + \" \");\n                } else {\n                    System.out.print(gameBoard[row][col]\
    \ + \" \");\n                }\n            }\n            System.out.println();\n\
    \        }\n        //Print a blank line\n        System.out.println();\n    }\n\
    \    private int countRemaining() {\n        //Returns the number of remaining\
    \ positons to hit before all ships have been sunk\n        int count = 0;\n  \
    \      for (int row = 0; row < gameBoardSize; row++) {\n            for (int col\
    \ = 0; col < gameBoardSize; col++) {\n                if (gameBoard[row][col]\
    \ == ship) {\n                   count++;\n                }\n            }\n\
    \        }\n        return count;\n    }\n}\n"
  learner_created: true
- name: src/battleship/Position.java
  visible: true
  text: |
    package battleship;

    public class Position {
        private int row;
        private int col;

        public Position(int row, int col) {
            this.row = row;
            this.col = col;
        }
        public void setPositon(int row, int col) {
            this.row = row;
            this.col = col;
        }

        public int getRow() {
            return row;
        }

        public int getCol() {
            return col;
        }

        public void next(Position start, Position end) {
            if (start.getRow() < row) {
                row = start.getRow(); //If row above range move to start row
            } else if (row > end.getRow()) {
                row = end.getRow();
            }
            if (start.getCol() < col) {
                col = start.getCol(); //If col to the left of range move into range
            } else if (col > end.getCol()) {
                col = end.getCol();
            }
            if (col  < end.getCol()) {
                //The end of the row has not been reached
                col++;
            } else {
                row++;
                col = start.getCol();
            }
        }
        public static int[] rangeSize(Position start, Position end) {
            int[] size = new int[2];
            if (start.getRow() > end.getRow()) {
                size[0] = start.getRow() - end.getRow() + 1;
            } else {
                size[0] = end.getRow() - start.getRow() + 1;
            }
            if (start.getCol() > end.getCol()) {
                size[1] = start.getCol() - end.getCol() + 1;
            } else {
                size[1] = end.getCol() - start.getCol() + 1;
            }
            return size;
        }
        public boolean isGreater(Position p) {
            if (row > p.getRow()) {
                return true;
            } else if (row == p.row && col >= p.col) {
                return true;
            } else {
                return false;
            }
        }
        public boolean isEqualTo(Position p) {
            return row == p.row && col == p.col;
        }

        public boolean isLessOrEquals(Position p) {
            if (row < p.row) {
                return true;
            } else if (row == p.row && col <= p.col) {
                return true;
            } else {
                return false;
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 04 Dec 2020 13:10:22 UTC
record: 5
